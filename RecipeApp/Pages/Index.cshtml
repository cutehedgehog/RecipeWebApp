@page
@model RecipeApp.Pages.IndexModel
@{
    ViewData["Title"] = "Home";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<style>

body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
    box-sizing: border-box; 
}

#inputItem {
    width: calc(100% - 30px);
    padding: 10px 15px;
    font-size: 1rem;
    border: 1px solid #ced4da;
    border-radius: 4px;
    margin-bottom: 15px;
    transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

#inputItem:focus {
    border-color: #80bdff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

button {
    font-size: 1rem;
    padding: 10px 15px;
    color: #fff;
    background-color: #007bff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

button:hover {
    background-color: #0056b3;
}

.remove-btn {
    font-size: 0.9rem;
    color: #dc3545;
    background: none;
    border: none;
    cursor: pointer;
    margin-left: 10px;
}

.remove-btn:hover {
    text-decoration: underline;
}

datalist {
    width: 100%;
}

#recipesContainer {
    height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    margin-top: 10px;
    background-color: #ffffff;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

#getRecipesBtn {
    width: 100%;
    margin-top: 10px;
}

#selectedItems {
    list-style: none;
    padding: 0;
    margin: 0 0 15px;
}

#selectedItems li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 5px;
    background-color: #f8f9fa;
 }

#selectedItems li:hover {
     background-color: #e9ecef;
}
    
.remove-btn {
    font-size: 0.9rem;
    color: #dc3545;
    background: none;
    border: none;
    cursor: pointer;
    margin-left: 10px; 
}

.remove-btn:hover {
    text-decoration: underline;
}

</style>

<input type="text" list="foodlist" autocomplete=true id="inputItem" />

<ul id="selectedItems">
    @foreach (var sItem in Model.StockSelectedItems)
    {
        <li>@sItem
        <button class="remove-btn" data-item="@sItem">Delete</button>
        </li>
    }
</ul>
<datalist id="foodlist">
    @foreach (var item in Model.AutoCompleteItems)
    {
        <option value="@item.Name" />
    }
</datalist>
<button id="getRecipesBtn">Get Recipes</button>
<div id="recipesContainer" style="height: 300px; overflow-y: scroll; border: 1px solid #ccc; padding: 10px; margin-top: 10px;">
</div>

@section Scripts {
    <script type="text/javascript">
        const textbox = document.getElementById("inputItem");
        const datalist = document.getElementById('foodlist');

        textbox.addEventListener('keyup', function (e) { 

            if (!isKeyboardEvent(e)) {
                var inputText = e.target.value.toLowerCase();
                fetch(`?handler=UpdateSelected&sItem=${inputText}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    }
                });
                textbox.textContent = "";
            }
        });

        function isKeyboardEvent(e) {
            return (e instanceof KeyboardEvent);
        }

        document.querySelectorAll(".remove-btn").forEach(button => {
            button.addEventListener("click", function (e) {
                const itemToRemove = e.target.getAttribute("data-item");
                fetch(`?handler=RemoveSelectedFromStock&sItem=${encodeURIComponent(itemToRemove)}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" }
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    }
                });
            });
        });

        document.getElementById("getRecipesBtn").addEventListener("click", function () {
            fetch("?handler=GetRecipes", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ ingredients: @Html.Raw(Json.Serialize(Model.StockSelectedItems)) })
            })
                .then(response => response.json())
                .then(data => {
                    const recipesContainer = document.getElementById("recipesContainer");
                    recipesContainer.innerHTML = "";
                    data.forEach(recipe => {
                        const recipeDiv = document.createElement("div");
                        recipeDiv.className = "recipe-item";
                        recipeDiv.textContent = recipe.title;
                        recipeDiv.addEventListener("click", function () {
                            window.location.href = `/RecipeDetails?recipeId=${recipe.id}`;
                        });
                        recipesContainer.appendChild(recipeDiv);
                    });
                });
        });
    </script>
}
